import logging
import os
from abc import abstractmethod, ABC
from datetime import timedelta, datetime

from aiogram import Bot
from aiogram.enums import ChatMemberStatus
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from db.sql.service import run_sql, UpdateUserDate, UpdateUserDateOnNone

load_dotenv()
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
buttons_subscribe = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Üü¶æ", callback_data="unity")],
])
DEBUG = True


class BotTask(ABC):
    @abstractmethod
    async def task(self):
        raise NotImplementedError


class KickUser(BotTask):
    CRY_MESSAGE = '''
    –ñ–∞–ª—å, —á—Ç–æ —Ç—ã –Ω–∞—Å –ø–æ–∫–∏–¥–∞–µ—à—åüò¢
    –ù–æ –º—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞, —É—Å–ø–µ—Ö–æ–≤ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Öü´°
    '''

    def __init__(self, bot: Bot, tg_id: int, left: bool = False):
        self.bot = bot
        self.tg_id = tg_id
        self.left = left

    async def task(self):
        try:
            member = await self.bot.get_chat_member(chat_id=CHAT_ID, user_id=self.tg_id)
            if member and member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED]:
                await self.bot.ban_chat_member(chat_id=CHAT_ID, user_id=self.tg_id)
                await self.bot.send_message(self.tg_id, self.CRY_MESSAGE, reply_markup=buttons_subscribe)
                await run_sql(UpdateUserDateOnNone(self.tg_id))
            else:
                logger.info("User not found")
                if self.left:
                    await self.bot.send_message(self.tg_id, self.CRY_MESSAGE, reply_markup=buttons_subscribe)
                    await run_sql(UpdateUserDateOnNone(self.tg_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ task –∫–ª–∞—Å—Å KickUser {e}")


class JoinUser(BotTask):
    def __init__(self, bot: Bot, tg_id: int):
        self.bot = bot
        self.tg_id = tg_id

    JOIN_TEXT = '''
    üî•–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ Muscle Lab!
     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–µ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞ü¶ç
    '''
    BOOST_TEXT = '''
    üî•–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –µ—â–µ –º–µ—Å—è—Ü –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
     –≤ –ª—É—á—à–µ–º –∫–∞–Ω–∞–ª–µ –¥–ª—è –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞üí™ 
    '''

    async def task(self):
        try:
            member = await self.bot.get_chat_member(chat_id=CHAT_ID, user_id=self.tg_id)
            if (member is None) or (member.status in [ChatMemberStatus.KICKED, ChatMemberStatus.LEFT]):
                await self.bot.unban_chat_member(chat_id=CHAT_ID, user_id=self.tg_id)
                invite_link = await self.bot.create_chat_invite_link(chat_id=CHAT_ID, creates_join_request=True,
                                                                     expire_date=datetime.now() + timedelta(hours=1))
                await self.bot.send_message(self.tg_id,
                                            f"{self.JOIN_TEXT} . –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µüëã"
                                            f" {invite_link.invite_link} ."
                                            f" –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
                                            f" –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π, –∏ –≤—ã"
                                            f" –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª–∞. –ù–µ —Ç—è–Ω–∏—Ç–µ –≤—Ä–µ–º—è!üëå")
                await run_sql(UpdateUserDate(self.tg_id, date_time=datetime.now() + (
                    timedelta(minutes=5) if DEBUG else timedelta(days=30)), debug=DEBUG))
            else:
                if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED]:
                    await run_sql(UpdateUserDate(self.tg_id, date_time=datetime.now() + (
                        timedelta(minutes=5) if DEBUG else timedelta(days=30)), debug=DEBUG))
                    await self.bot.send_message(self.tg_id, self.BOOST_TEXT)
                elif member.status in [ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
                    await self.bot.send_message(self.tg_id, "–í—ã –∞–¥–º–∏–Ω —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã!üí™")
        except Exception as e:
            logger.error(f"err tasks.py class JoinUser: {e}")
