import random

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from api.bot.access import JoinUser
from api.payments.wayforpay_api import create_regular_invoice, check_ok_regular_invoice
from db.sql.model import User
from db.sql.service import run_sql, AttachWfpDataToUser
from middlewares.middleware import AuthMiddleware, AuthMiddlewareCallback

router = Router()
router.message.middleware(AuthMiddleware())
router.callback_query.middleware(AuthMiddlewareCallback())

text_wtf = '''
‚ùóÔ∏è–ü–ª–∞—Ç–µ–∂ –±—ã–ª —Å–æ–∑–¥–∞–Ω: –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'
–∏ –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
'''


@router.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ WayForPay üíé")
async def pay_router(message: Message, user: User) -> None:
    order_id = f"HD{user.tg_id}PD{random.randint(1, 1000)}"
    url = create_regular_invoice(order_id)
    wtf_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å üí≥", url=url[0])],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚ö°", callback_data=f"wfp_{order_id}")]
    ])
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=ReplyKeyboardRemove())
    await message.answer(text_wtf, reply_markup=wtf_buttons)


@router.callback_query(F.data.startswith("wfp_"))
async def order_callback(query: CallbackQuery):
    order_id = query.data.split("_")[1]
    status = await check_ok_regular_invoice(order_id)
    if status:
        await run_sql(AttachWfpDataToUser(query.from_user.id, order_id))
        await query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–øü•≥ –ò—Å–ø–æ–ª—å–∑—É—è wayforpay, —Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π!üôå", show_alert=True)
        await query.message.delete()
        await JoinUser(query.bot, query.from_user.id).task()
    else:
        await query.answer("–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂!", show_alert=True)
