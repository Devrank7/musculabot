import os

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from dotenv import load_dotenv

from api.bot.access import JoinUser
from api.payments.ton import check_payment
from middlewares.middleware import AuthMiddleware
from utility.utils import generate_random_code

router = Router()
router.message.middleware(AuthMiddleware())
load_dotenv()
wallet_address_base64 = os.getenv("WALLET_ADRESS_BASE64")
wallet_address_hex16 = os.getenv("WALLET_ADRESS_HEX")


def get_ton_text(wallet_address, memo):
    return f'''
–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏ *TON* –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (*memo*).
 –¢—ã –º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä—ë–¥.

üëâ *–ê–¥—Ä–µ—Å:* `{wallet_address}`
`- - - - - - - - - - - - - - - - -` 
üëâ *Memo:* `{memo}`

–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ *1 –º–µ—Å—è—Ü = 0.7 TON*.
 
P.s: —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å *–∞–¥—Ä–µ—Å –∏ MEMO*, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–∏—Ö. 
'''


@router.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ TON üí≥")
async def pay_router(message: Message) -> None:
    memo_code = generate_random_code()
    ton_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É‚ö°", callback_data=f"ton_{memo_code}")]
    ])
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=ReplyKeyboardRemove())
    await message.answer(get_ton_text(wallet_address_base64, memo_code), reply_markup=ton_button,
                         parse_mode=ParseMode.MARKDOWN)


@router.callback_query(F.data.startswith("ton_"))
async def ton_reader(query: CallbackQuery):
    memo = query.data.split('_')[1]
    status, error = await check_payment(wallet_address_hex16, memo, 0.7)
    if status:
        await query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏!ü•≥", show_alert=True)
        await query.message.delete()
        await JoinUser(query.bot, query.from_user.id).task()
    else:
        if error:
            await query.answer("–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏!‚òπÔ∏è")
        else:
            await query.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏!‚òπÔ∏è", show_alert=True)
